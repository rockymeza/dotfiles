snippet funs
	const ${1} = (${2}) => ${3};
snippet func
	const ${1} = (${2}) => {
	  ${3}
	};
# if
snippet if
	if (${1}) {
		${2}
	}
# switch
snippet switch
	switch (${1:expression}) {
	  ${3}
		default:
			return ${2:// code};
	}
# case
snippet case
	case '${1:case}':
		return ${2:// code};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
snippet RC
	// @flow
	import React, { Component } from 'react';

	type Props = {|
	  className?: string,

	|};

	class ${1:ComponentName} extends Component {
		props: Props;

		render() {
		  return (
			  ${2}
			);
		}
	}

	export default $1;
snippet RSFC
	// @flow
	import React from 'react';

	type Props = {|
	|};

	const ${1:ComponentName} = ({  }: Props) => (
	  ${2}
	);

	export default $1;
snippet reducer
	const ${1:thing}Initial = ${2};

	const $1 = (state = $1Initial, action) => {
	  switch (action.type) {
		  case ${3}:
			  return {
				  ...state,
					${4}
				};
		  default:
			  return state;
		}
	}
snippet storybook
	// @flow
	import React from 'react';
	import { storiesOf } from '@kadira/storybook';

	import $1 from './$1';

	storiesOf('${1:MyComponent}', module)
	  .add('basic', () => (
		  ${2}
		));
